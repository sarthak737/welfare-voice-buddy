import { NextResponse } from "next/server";

const SYSTEM_PROMPTS = {
  en: `You are an AI assistant specialized in Indian government schemes.
  - Provide only accurate information from official government sources like india.gov.in, mygov.in, and ministry websites
  - Be concise and factual
  - If unsure, say you don't know rather than guessing
  - Format responses clearly with scheme name, eligibility, benefits, and application process
  - Include relevant official links when possible
  - Current year is ${new Date().getFullYear()}`,

  hi: `‡§Ü‡§™ ‡§≠‡§æ‡§∞‡§§ ‡§∏‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡§§‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§è‡§ï ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•à‡§Ç‡•§
  - ‡§ï‡•á‡§µ‡§≤ ‡§Ü‡§ß‡§ø‡§ï‡§æ‡§∞‡§ø‡§ï ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•ç‡§∞‡•ã‡§§‡•ã‡§Ç ‡§ú‡•à‡§∏‡•á india.gov.in, mygov.in ‡§î‡§∞ ‡§Æ‡§Ç‡§§‡•ç‡§∞‡§æ‡§≤‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü‡•ã‡§Ç ‡§∏‡•á ‡§∏‡§ü‡•Ä‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç
  - ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§î‡§∞ ‡§§‡§•‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ï ‡§∞‡§π‡•á‡§Ç
  - ‡§Ø‡§¶‡§ø ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç ‡§§‡•ã ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§≤‡§ó‡§æ‡§®‡•á ‡§ï‡•á ‡§¨‡§ú‡§æ‡§Ø ‡§ï‡§π‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§®‡§π‡•Ä‡§Ç ‡§™‡§§‡§æ
  - ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ, ‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ, ‡§≤‡§æ‡§≠ ‡§î‡§∞ ‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡§§‡§æ‡§è‡§Ç
  - ‡§∏‡§Ç‡§≠‡§µ ‡§π‡•ã ‡§§‡•ã ‡§™‡•ç‡§∞‡§æ‡§∏‡§Ç‡§ó‡§ø‡§ï ‡§Ü‡§ß‡§ø‡§ï‡§æ‡§∞‡§ø‡§ï ‡§≤‡§ø‡§Ç‡§ï ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç
  - ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§µ‡§∞‡•ç‡§∑ ${new Date().getFullYear()} ‡§π‡•à`,
};

export async function POST(req: Request) {
  try {
    const body = await req.json().catch(() => null);
    if (!body || typeof body !== "object") {
      return NextResponse.json(
        { error: "Invalid request format" },
        { status: 400 }
      );
    }

    const { query, language = "en" } = body;
    console.log("üì® Incoming query:", { query, language });

    if (typeof query !== "string" || !query.trim()) {
      return NextResponse.json(
        { error: "Query must be a non-empty string" },
        { status: 400 }
      );
    }

    if (!["en", "hi"].includes(language)) {
      return NextResponse.json(
        { error: "Language must be either 'en' or 'hi'" },
        { status: 400 }
      );
    }

    if (!process.env.TOGETHER_API_KEY) {
      console.error("‚ùå TOGETHER_API_KEY not configured");
      return NextResponse.json(
        { error: "Service configuration error" },
        { status: 500 }
      );
    }

    if (query.length > 500) {
      return NextResponse.json(
        { error: "Query too long. Maximum 500 characters" },
        { status: 400 }
      );
    }

    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), 25000);

    // üîÅ Dynamic model switching
    const model =
      language === "hi"
        ? "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo"
        : "mistralai/Mixtral-8x7B-v0.1";

    // üëá Force Hindi output if needed
    const userContent =
      language === "hi"
        ? `${query.trim()} ‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¶‡•á‡§Ç‡•§`
        : query.trim();

    const response = await fetch(
      "https://api.together.xyz/v1/chat/completions",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${process.env.TOGETHER_API_KEY}`,
        },
        body: JSON.stringify({
          model,
          messages: [
            {
              role: "system",
              content: SYSTEM_PROMPTS[language as keyof typeof SYSTEM_PROMPTS],
            },
            { role: "user", content: userContent },
          ],
          max_tokens: 300,
          temperature: 0.3,
          top_p: 0.7,
          stream: false,
        }),
        signal: controller.signal,
      }
    );

    clearTimeout(timeout);

    if (!response.ok) {
      const errorText = await response.text().catch(() => "API error");
      console.error("‚ùå Together API error:", response.status, errorText);
      return NextResponse.json(
        { error: "Unable to process request. Please try again." },
        { status: response.status > 500 ? 503 : 400 }
      );
    }

    const data = await response.json();
    const reply = data.choices?.[0]?.message?.content?.trim();

    if (!reply) {
      console.error("‚ùå Empty AI response");
      return NextResponse.json(
        { error: "Received empty response from service" },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      response: reply,
      language,
      modelUsed: model,
    });
  } catch (error) {
    console.error("‚ùå Processing error:", error);

    if (error instanceof Error && error.name === "AbortError") {
      return NextResponse.json(
        { error: "Request timeout. Please try again." },
        { status: 408 }
      );
    }

    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}
